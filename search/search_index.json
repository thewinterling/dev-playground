{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DevPlayground Documentation","text":"<p>Welcome to the documentation of this dev-playground mono repository. We bundle all sorts of training code as well as small code snippets that came to our attention.</p>"},{"location":"#content","title":"Content","text":"<p>The content of this repo is to be ever-expanding (we aim to have it as a collection of things we learned along the way). Currently it consists of </p> <ul> <li>C++ code snippets (mainly from leetcode)</li> <li>Setup of GitHub Actions</li> <li>Setup of the repo as a whole</li> <li>Various python scripts and smaller python packages</li> <li>uv for python dependency management</li> <li>Bazel as an overall build system</li> </ul>"},{"location":"#setup-the-repo","title":"Setup the repo","text":"<p>We have a setup script that handles all necessary steps. Run it via</p> <pre><code>./set-me-up.py\n</code></pre> <p>It - installs <code>clang-format-15</code> if not already available, - installs <code>bazelisk</code> if not already available, - installs <code>uv</code> if not already available, - creates the <code>venv</code> using <code>uv</code>, - installs python sub packages as editable packages.</p>"},{"location":"bazel/","title":"Bazel","text":"<p>We use <code>bazel</code> for the C++ part (in the future possibly for everything). Therefore we installed <code>bazelisk</code>, for more reference see here: https://bazel.build/install/bazelisk https://github.com/bazelbuild/bazelisk/blob/master/README.md</p> <p>After installation check its correct install via</p> <pre><code>bazelisk version\n</code></pre> <p>Create a <code>~/.bazelrc</code>:</p> <pre><code># If you wish cross-workspace caching.\nbuild --disk_cache=/home/&lt;USER&gt;/.bazelcache\n\n# Limit the resources that Bazel is allowed to use.\n# This prevents the PC from freezing because Bazel uses everything.\nbuild --local_resources=cpu=HOST_CPUS-4\nbuild --local_resources=memory=HOST_RAM*.6\n\n# Use colors in GCC output.\nbuild --copt=-fdiagnostics-color=always\n</code></pre> <p>Then you can</p> <pre><code>bazelisk build ...                      # Builds everything\nbazelisk build //path/to/package        # Builds a specific target \n\nbazelisk query '...'                    # Shows all targets\nbazelisk query '//cpp/...'              # Shows targets in cpp\n\nbazelisk run //your/target:target_name  # Run the target\nbazelisk test //your/target:target_name # Run the test\n</code></pre>"},{"location":"cpp/leetcode/add_two_numbers/","title":"Add Two Numbers (#2)","text":"<p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p> <p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> <p>Example 1:</p> <p>Input: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807.</p> <p>Example 2:</p> <p>Input: l1 = [0], l2 = [0] Output: [0]</p> <p>Example 3:</p> <p>Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1]</p> <p>Constraints:</p> <pre><code>The number of nodes in each linked list is in the range [1, 100].\n0 &lt;= Node.val &lt;= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.\n</code></pre>"},{"location":"cpp/leetcode/merge_arrays/","title":"Merge Sorted Array (#88)","text":"<p>You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.</p> <p>Merge nums1 and nums2 into a single array sorted in non-decreasing order.</p> <p>The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.</p> <p>Example 1:</p> <p>Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 Output: [1,2,2,3,5,6] Explanation: The arrays we are merging are [1,2,3] and [2,5,6]. The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.</p> <p>Example 2:</p> <p>Input: nums1 = [1], m = 1, nums2 = [], n = 0 Output: [1] Explanation: The arrays we are merging are [1] and []. The result of the merge is [1].</p> <p>Example 3:</p> <p>Input: nums1 = [0], m = 0, nums2 = [1], n = 1 Output: [1] Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1]. Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.</p>"},{"location":"cpp/leetcode/merge_arrays/#constraints","title":"Constraints:","text":"<pre><code>nums1.length == m + n\nnums2.length == n\n0 &lt;= m, n &lt;= 200\n1 &lt;= m + n &lt;= 200\n-109 &lt;= nums1[i], nums2[j] &lt;= 109\n</code></pre>"},{"location":"cpp/leetcode/remove_element/","title":"Remove Element (#27)","text":"<p>Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.</p> <p>Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:</p> <pre><code>Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.\nReturn k.\n</code></pre> <p>Custom Judge:</p> <p>The judge will test your solution with the following code:</p> <p>int[] nums = [...]; // Input array int val = ...; // Value to remove int[] expectedNums = [...]; // The expected answer with correct length.                             // It is sorted with no values equaling val.</p> <p>int k = removeElement(nums, val); // Calls your implementation</p> <p>assert k == expectedNums.length; sort(nums, 0, k); // Sort the first k elements of nums for (int i = 0; i &lt; actualLength; i++) {     assert nums[i] == expectedNums[i]; }</p> <p>If all assertions pass, then your solution will be accepted.</p> <p>Example 1:</p> <p>Input: nums = [3,2,2,3], val = 3 Output: 2, nums = [2,2,,] Explanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Example 2:</p> <p>Input: nums = [0,1,2,2,3,0,4,2], val = 2 Output: 5, nums = [0,1,4,0,3,,,_] Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4. Note that the five elements can be returned in any order. It does not matter what you leave beyond the returned k (hence they are underscores).</p> <p>Constraints:</p> <pre><code>0 &lt;= nums.length &lt;= 100\n0 &lt;= nums[i] &lt;= 50\n0 &lt;= val &lt;= 100\n</code></pre>"},{"location":"cpp/leetcode/two_sum/","title":"Two Sum (#1)","text":"<p>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p> <p>You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>You can return the answer in any order.</p> <p>Example 1:</p> <p>Input: nums = [2,7,11,15], target = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</p> <p>Example 2:</p> <p>Input: nums = [3,2,4], target = 6 Output: [1,2]</p> <p>Example 3:</p> <p>Input: nums = [3,3], target = 6 Output: [0,1]</p> <p>Constraints:</p> <pre><code>2 &lt;= nums.length &lt;= 104\n-109 &lt;= nums[i] &lt;= 109\n-109 &lt;= target &lt;= 109\nOnly one valid answer exists.\n</code></pre>"},{"location":"github_actions/","title":"Github Actions / Pre commit hooks","text":"<p>We run github actions acting as a minimalist CI Pipeline. Also there are <code>pre-commit</code> hooks in-place so that we do not have to worry about ill-formated code (and removing it as a topic of discussion in the PRs) hence ultimately making things more efficient. While the CI pipeline is to enforce certain standards on the code of this repo, it is also to train how to set it up - and maintain it.</p> <p>Implementation is in <code>&lt;REPO_ROOT&gt;/.github</code>.</p>"},{"location":"python/image_describer/","title":"Image describer","text":"<p>The package bundles a few files to have an easy-to-use image describer.</p>"},{"location":"python/image_describer/#install","title":"Install","text":"<p>Everything handeled by the top-level <code>pyproject.toml</code> already.</p>"},{"location":"python/image_describer/#how-to-use","title":"How to use","text":"<pre><code>$ python -m image_describer describe --help\nUsage: python -m image_describer describe [OPTIONS]\n\n  Generate detailed captions for one given image.\n\nOptions:\n  --images_folder PATH  Path to the data folder containing the image(s).\n  --help                Show this message and exit.\n</code></pre> <p>You can pass any folder to the describer. If you wish to have the images close to the script, put them in <code>image_describer/data</code> - there is a <code>.gitignore</code> for that folder such that the images do not per accident get added to git.</p> <pre><code>$ python -m image_describer describe --images_folder image_describer/data/\nimage_describer/data/test_001.jpg:   a police car is parked on the side of the road\nimage_describer/data/test_002.jpg:   a white and blue sky\n</code></pre> <p>Run the tests via <code>pytest</code>:</p> <pre><code>pytest tests\n</code></pre> <p>TODO: bazelize the module to make its usage/test easier (i.e. executable from everywhere, tests integrated to CI)</p>"},{"location":"python/packaging_example/","title":"Python Packaging Example","text":"<p>This package is soley here for the purpose of demonstrating how to package a python package. The package itself is not of any relevance.</p> <p>Packaging done following https://packaging.python.org/en/latest/tutorials/packaging-projects/ but we used <code>uv</code> for it. Thus we only took the linked page as a reference.</p>"},{"location":"python/packaging_example/#steps","title":"Steps","text":""},{"location":"python/packaging_example/#1-create-the-package","title":"1. Create the package","text":"<ul> <li>create the package incl. python files</li> <li>add readme, license and pyproject.toml (we created the latter by running <code>uv init</code> in our package folder)</li> </ul>"},{"location":"python/packaging_example/#2-build-the-wheel","title":"2. Build the wheel","text":"<ul> <li>run <code>uv build</code> (see https://docs.astral.sh/uv/reference/cli/#uv-build)</li> </ul>"},{"location":"python/packaging_example/#optional-3-upload-to-an-index","title":"(optional) 3. Upload to an index","text":"<ul> <li>run <code>uv publish</code> (see https://docs.astral.sh/uv/reference/cli/#uv-publish)</li> </ul> <p>(For this example we did not publish anything, we just build the wheel file and verified that it can be installed and used again - see next step.)</p>"},{"location":"python/packaging_example/#4-test-the-build","title":"4. Test the build","text":"<pre><code>$ mkdir test\n$ uv init\n$ uv venv\n$ source .venv/bin/activate\n$ uv pip install /home/&lt;USER&gt;/workspace/dev-playground/dist/packaging_example-0.0.1-py3-none-any.whl\nResolved 1 package in 2ms\nPrepared 1 package in 5ms\nInstalled 1 package in 13ms\n + packaging-example==0.0.1 (from file:///home/&lt;USER&gt;/workspace/dev-playground/dist/packaging_example-0.0.1-py3-none-any.whl)\n</code></pre> <p>Then you can use the package as any python package:</p> <pre><code>&gt;&gt;&gt; from packaging_example.example import hello\n&gt;&gt;&gt; hello()\nthis is a dummy example.\n</code></pre>"},{"location":"python/standalone_scripts/","title":"Standalone scripts","text":"<p>This folder contains standalone scripts and/or one-file-showcases of a particular problem. Each of the files is independent from all other files here. So the use-case or  showcase of a problem is all within that one file. For more details of what the content is, each file has a descriptive docstring where it is made clear what the focus of the file is.</p>"},{"location":"uv/","title":"Python package manager <code>uv</code>","text":"<p>We use <code>uv</code> as python package manager. For more infos see https://github.com/astral-sh/uv and https://docs.astral.sh/uv/.</p> <p>Example usage:</p> <pre><code>uv add &lt;some-py-module&gt;     # Adds the dependency to the pyproject.toml file.\nuv sync                     # Updates the projects environment.\nuv venv                     # Creates a venv for the project.\nsource .venv/bin/activate   # Activate the venv.\n&lt;work as 'normal'&gt;\n</code></pre> <p>or instead of sourcing the venv, <code>uv</code> can also be used like </p> <pre><code>uv run &lt;script_name&gt;\n</code></pre> <p>which then uses the environment for the script as well.</p>"}]}